From d4ae72f7cef6fd0c1fb7438f998eed1a731f416f Mon Sep 17 00:00:00 2001
From: Josh Triplett <josh@joshtriplett.org>
Date: Fri, 16 Sep 2022 14:41:30 +0100
Subject: fs/exec.c: Add fast path for ENOENT on PATH search before allocating
 mm

Currently, execve allocates an mm and parses argv and envp before
checking if the path exists. However, the common case of a $PATH search
may have several failed calls to exec before a single success. Do a
filename lookup for the purposes of returning ENOENT before doing more
expensive operations.

This does not create a TOCTTOU race, because this can only happen if the
file didn't exist at some point during the exec call, and that point is
permitted to be when we did our lookup.

To measure performance, I ran 2000 fork and execvpe calls with a
seven-element PATH in which the file was found in the seventh directory
(representative of the common case as /usr/bin is the seventh directory
on my $PATH), as well as 2000 fork and execve calls with an absolute
path to an existing binary. I recorded the minimum time for each, to
eliminate noise from context switches and similar.

Without fast-path:
fork/execvpe: 49876ns
fork/execve:  32773ns

With fast-path:
fork/execvpe: 36890ns
fork/execve:  32069ns

The cost of the additional lookup seems to be in the noise for a
successful exec, but it provides a 26% improvement for the path search
case by speeding up the six failed execs.

Signed-off-by: Josh Triplett <josh@joshtriplett.org>
Link: https://lore.kernel.org/r/5c7333ea4bec2fad1b47a8fa2db7c31e4ffc4f14.1663334978.git.josh@joshtriplett.org
Signed-off-by: Kees Cook <keescook@chromium.org>
---
 fs/exec.c | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/fs/exec.c b/fs/exec.c
index 6518e33ea813c..1baaf749754ad 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1896,6 +1896,19 @@ static int do_execveat_common(int fd, struct filename *filename,
 	if (IS_ERR(filename))
 		return PTR_ERR(filename);
 
+	/*
+	 * Fast-fail the ENOENT case for $PATH walk failures, avoiding the
+	 * allocation of bprm, mm, etc, and before parsing arguments.
+	 */
+	if (fd == AT_FDCWD && flags == 0 && filename->name[0] == '/') {
+		struct path path;
+		retval = filename_lookup(AT_FDCWD, filename, 0, &path, NULL);
+		if (retval < 0)
+			goto out_ret;
+		/* This isn't a ToCToU because we'll do a full open later. */
+		path_put(&path);
+	}
+
 	/*
 	 * We move the actual failure in case of RLIMIT_NPROC excess from
 	 * set*uid() to execve() because too many poorly written programs
-- 
cgit 1.2.3-korg

